server {
    listen 80;
    server_name sinohiro.dip.jp;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    index index.php index.html;
    root /var/www/html;

    location / {
        try_files $uri $uri/ /index.php$is_args$args;
        client_max_body_size 51200m;
        fastcgi_read_timeout 86400s;
        proxy_connect_timeout 86400s;
        proxy_send_timeout 86400s;
        proxy_read_timeout 86400s;
    }

    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    location ~ ^/speedtest/(.*\.php)$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass   php:9000;
        fastcgi_index  index.php;
    
        include        fastcgi_params;
        fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param  PATH_INFO $fastcgi_path_info;
    }

    location ^~ /.well-known {
        # The rules in this block are an adaptation of the rules
        # in the Nextcloud `.htaccess` that concern `/.well-known`.

        location = /.well-known/carddav { return 301 /nextcloud/remote.php/dav/; }
        location = /.well-known/caldav  { return 301 /nextcloud/remote.php/dav/; }
        location = /.well-known/webfinger { return 301 /nextcloud/remote.php/dav/; }
        location = /.well-known/nodeinfo  { return 301 /nextcloud/remote.php/dav/; }

        location /.well-known/acme-challenge    { try_files $uri $uri/ =404; }
        location /.well-known/pki-validation    { try_files $uri $uri/ =404; }

        # Let Nextcloud's API for `/.well-known` URIs handle all other
        # requests by passing them to the front-end controller.
        return 301 /nextcloud/index.php$request_uri;
    }

    location /nextcloud {
        auth_basic off;
        rewrite /nextcloud/(.*)$ /$1 break;
        proxy_pass http://nextcloud; 
    }
}

server {
    server_name  sinohiro.dip.jp;

    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 
    ssl_certificate      /etc/letsencrypt/live/sinohiro.dip.jp/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/sinohiro.dip.jp/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers off;

    add_header Strict-Transport-Security "max-age=2592000" always;

    root         /var/www/html;

    location / {
        client_max_body_size 51200m;
        fastcgi_read_timeout 86400s;
        proxy_connect_timeout 86400s;
        proxy_send_timeout 86400s;
        proxy_read_timeout 86400s;
    }

    location ~ ^/speedtest/(.*\.php)$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass   php:9000;
        fastcgi_index  index.php;
    
        include        fastcgi_params;
        fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param  PATH_INFO $fastcgi_path_info;
    }

    location ^~ /.well-known {
        # The rules in this block are an adaptation of the rules
        # in the Nextcloud `.htaccess` that concern `/.well-known`.

        location = /.well-known/carddav { return 301 /nextcloud/remote.php/dav/; }
        location = /.well-known/caldav  { return 301 /nextcloud/remote.php/dav/; }
        location = /.well-known/webfinger { return 301 /nextcloud/remote.php/dav/; }
        location = /.well-known/nodeinfo  { return 301 /nextcloud/remote.php/dav/; }

        location /.well-known/acme-challenge    { try_files $uri $uri/ =404; }
        location /.well-known/pki-validation    { try_files $uri $uri/ =404; }

        # Let Nextcloud's API for `/.well-known` URIs handle all other
        # requests by passing them to the front-end controller.
        return 301 /nextcloud/index.php$request_uri;
    }

    location /nextcloud {
        auth_basic off;
        rewrite /nextcloud/(.*)$ /$1 break;
        proxy_pass http://nextcloud;
    }
 }